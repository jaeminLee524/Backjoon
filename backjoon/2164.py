### 문제
# N장의 카드가 있다. 각각의 카드는 차례로 1부터 N까지의 번호가 붙어 있으며, 1번 카드가 제일 위에, N번 카드가 제일 아래인 상태로 순서대로 카드가 놓여 있다.
# 이제 다음과 같은 동작을 카드가 한 장 남을 때까지 반복하게 된다. 우선, 제일 위에 있는 카드를 바닥에 버린다. 그 다음, 제일 위에 있는 카드를 제일 아래에 있는 카드 밑으로 옮긴다.
# 예를 들어 N=4인 경우를 생각해 보자. 카드는 제일 위에서부터 1234 의 순서로 놓여있다. 1을 버리면 234가 남는다. 여기서 2를 제일 아래로 옮기면 342가 된다. 3을 버리면 42가 되고, 4를 밑으로 옮기면 24가 된다. 마지막으로 2를 버리고 나면, 남는 카드는 4가 된다.
# N이 주어졌을 때, 제일 마지막에 남게 되는 카드를 구하는 프로그램을 작성하시오.

### 입력
# 첫째 줄에 정수 N(1 ≤ N ≤ 500,000)이 주어진다.


# 시간복잡도
# 배열을 이용할 경우 -> O(N)
# 1. 맨 앞의 값을 삭제 -> 삭제 1
# 2. 맨 앞의 값을 맨 뒤로 보내기 -> 삭제 1, 삽입 1
# 1개가 남을때까지 반복해야 한다. -> (N-1)번까지
# 총 삭제, 삭제, 삽입 3번의 O(N) 시간복잡도가 수행되어야한다.
# (N - 1) * 3O(N) -> (N -1) * O(3N)
# -> O(N^2 - 1) -> O(N^2) -> 엔제곱
# 입력값의 최대가 500,000 -> 5 * 10^5 -> 25 * 10^10
# 10^8: 1억. 대략, 1억에 1초

# from collections import deque
#
# N = int(input())
# dq = deque(range(1, N + 1))
#
# while len(dq) > 1:
#     dq.popleft()
#     dq.append(dq.popleft())
#
# print(dq.popleft())


N = int(input())
arr = [*range(1, N + 1)]
print(arr)

while len(arr) > 1:
    arr.pop(0)
    arr.append(arr.pop(0))

print(arr.pop())